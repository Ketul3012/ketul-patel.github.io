---
import { siteConfig } from "../config";

const hasProjects = siteConfig.projects && siteConfig.projects.length > 0;
const hasExperience = siteConfig.experience && siteConfig.experience.length > 0;
const hasEducation = siteConfig.education && siteConfig.education.length > 0;
---

<header
  id="header"
  class="fixed top-0 left-0 right-0 z-50 hidden md:block transition-all duration-300"
>
  <nav class="max-w-7xl mx-auto px-8 py-4">
    <div class="flex items-center justify-between">
      <ul class="flex items-center gap-8">
        <li>
          <a
            href="#about"
            class="text-gray-900 dark:text-gray-100 hover:text-black dark:hover:text-white transition-colors font-medium"
          >
            About
          </a>
        </li>
        {
          hasProjects && (
            <li>
              <a
                href="#projects"
                class="text-gray-900 dark:text-gray-100 hover:text-black dark:hover:text-white transition-colors font-medium"
              >
                Projects
              </a>
            </li>
          )
        }
        {
          hasExperience && (
            <li>
              <a
                href="#experience"
                class="text-gray-900 dark:text-gray-100 hover:text-black dark:hover:text-white transition-colors font-medium"
              >
                Experience
              </a>
            </li>
          )
        }
        {
          hasEducation && (
            <li>
              <a
                href="#education"
                class="text-gray-900 dark:text-gray-100 hover:text-black dark:hover:text-white transition-colors font-medium"
              >
                Education
              </a>
            </li>
          )
        }
      </ul>
      
      <!-- Dark Mode Toggle -->
      <button
        id="dark-mode-toggle"
        class="p-2 rounded-lg bg-gray-100 dark:bg-gray-800 text-gray-900 dark:text-gray-100 hover:bg-gray-200 dark:hover:bg-gray-700 transition-colors duration-200 cursor-pointer"
        aria-label="Toggle dark mode"
      >
        <!-- Sun icon (visible in dark mode) -->
        <svg
          id="sun-icon"
          class="w-5 h-5 hidden dark:block"
          fill="none"
          stroke="currentColor"
          viewBox="0 0 24 24"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z"
          />
        </svg>
        <!-- Moon icon (visible in light mode) -->
        <svg
          id="moon-icon"
          class="w-5 h-5 block dark:hidden"
          fill="none"
          stroke="currentColor"
          viewBox="0 0 24 24"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z"
          />
        </svg>
      </button>
    </div>
  </nav>
</header>

<script>
  // Dark mode functionality
  function initDarkMode() {
    const toggle = document.getElementById("dark-mode-toggle");
    const html = document.documentElement;
    
    if (!toggle) return;
    
    // Check for saved theme preference or default to light mode
    const savedTheme = localStorage.getItem("theme");
    const prefersDark = window.matchMedia("(prefers-color-scheme: dark)").matches;
    
    if (savedTheme === "dark" || (!savedTheme && prefersDark)) {
      html.classList.add("dark");
    }
    
    // Update header background based on theme
    updateHeaderBackground();
    
    // Set initial icon state
    const isDark = html.classList.contains("dark");
    const sunIcon = document.getElementById("sun-icon");
    const moonIcon = document.getElementById("moon-icon");
    if (sunIcon && moonIcon) {
      if (isDark) {
        sunIcon.classList.remove("hidden");
        sunIcon.classList.add("block");
        moonIcon.classList.remove("block");
        moonIcon.classList.add("hidden");
      } else {
        sunIcon.classList.remove("block");
        sunIcon.classList.add("hidden");
        moonIcon.classList.remove("hidden");
        moonIcon.classList.add("block");
      }
    }
    
    // Add click event listener
    toggle.addEventListener("click", () => {
      html.classList.toggle("dark");
      const isDark = html.classList.contains("dark");
      localStorage.setItem("theme", isDark ? "dark" : "light");
      updateHeaderBackground();
      
      // Force icon visibility update
      const sunIcon = document.getElementById("sun-icon");
      const moonIcon = document.getElementById("moon-icon");
      if (sunIcon && moonIcon) {
        if (isDark) {
          sunIcon.classList.remove("hidden");
          sunIcon.classList.add("block");
          moonIcon.classList.remove("block");
          moonIcon.classList.add("hidden");
        } else {
          sunIcon.classList.remove("block");
          sunIcon.classList.add("hidden");
          moonIcon.classList.remove("hidden");
          moonIcon.classList.add("block");
        }
      }
      
      // Dispatch global event for dark mode change
      window.dispatchEvent(new CustomEvent('themechange', {
        detail: { isDark: isDark }
      }));
    });
  }
  
  function updateHeaderBackground() {
    const header = document.getElementById("header");
    const isDark = document.documentElement.classList.contains("dark");
    
    if (window.scrollY > 100) {
      if (isDark) {
        header?.classList.add("bg-gray-900/80", "backdrop-blur-sm");
        header?.classList.remove("bg-white/80");
      } else {
        header?.classList.add("bg-white/80", "backdrop-blur-sm");
        header?.classList.remove("bg-gray-900/80");
      }
    } else {
      header?.classList.remove("bg-white/80", "bg-gray-900/80", "backdrop-blur-sm");
    }
  }
  
  // Initialize dark mode when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initDarkMode);
  } else {
    initDarkMode();
  }
  
  // Handle scroll events
  window.addEventListener("scroll", updateHeaderBackground);
  
  // Listen for system theme changes
  window.matchMedia("(prefers-color-scheme: dark)").addEventListener("change", (e) => {
    if (!localStorage.getItem("theme")) {
      if (e.matches) {
        document.documentElement.classList.add("dark");
      } else {
        document.documentElement.classList.remove("dark");
      }
      updateHeaderBackground();
      
      // Dispatch global event for dark mode change
      window.dispatchEvent(new CustomEvent('themechange', {
        detail: { isDark: e.matches }
      }));
    }
  });
</script>

<style>
  html {
    scroll-behavior: smooth;
  }
</style>
